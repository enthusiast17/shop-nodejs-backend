app: shop-nodejs-backend
service: products-service
frameworkVersion: '3'
useDotenv: true
provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: eu-west-1
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${env:PRODUCTS_TABLE_NAME}
            - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${env:STOCKS_TABLE_NAME}
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            Fn::GetAtt: [ catalogItemsQueue, Arn ]

resources:
  Resources:
    catalogItemsQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: catalogItemsQueue
  Outputs:
    getCatalogItemsQueueRef:
      Value:
        Ref: catalogItemsQueue
      Export:
        Name: getCatalogItemsQueueRef
    getCatalogItemsQueueArn:
      Value:
        Fn::GetAtt: [ catalogItemsQueue, Arn ]
      Export:
        Name: getCatalogItemsQueueArn

package:
  individually: true 
  patterns:
    - './build/main.js'
    - '!./src'
    - '!./tests'
    - '!./*'
    - '!./node_modules'
    - '!./dynamodb/client.js'
    - '!./scripts/fill-tables.script.js'

functions:
  getProductsList:
    handler: build/main.getProductsList
    events:
      - httpApi:
          path: /products
          method: get
    environment: ${file(env.json)}

  getProductsById:
    handler: build/main.getProductsById
    events:
      - httpApi:
          path: /products/{id}
          method: get
    environment: ${file(env.json)}
   
  createProduct:
    handler: build/main.createProduct
    events:
      - httpApi:
          path: /products
          method: post
    environment: ${file(env.json)}

  catalogBatchProcess:
    handler: build/main.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
    environment: ${file(env.json)}

plugins:
  - serverless-auto-swagger

custom:
  autoswagger:
    apiType: httpApi
